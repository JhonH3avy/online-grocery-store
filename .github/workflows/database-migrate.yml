# Database Migration Workflow
# This workflow allows manual database migration to be triggered from GitHub Actions

name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for migration'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      confirm_migration:
        description: 'Type "MIGRATE" to confirm you want to run database migrations'
        required: true
        type: string

jobs:
  validate-input:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.should_proceed }}
    steps:
      - name: Validate confirmation input
        id: validation
        run: |
          if [ "${{ github.event.inputs.confirm_migration }}" = "MIGRATE" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "✅ Migration confirmation validated"
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "❌ Migration not confirmed. Please type 'MIGRATE' to proceed."
            exit 1
          fi

  migrate:
    runs-on: ubuntu-latest
    needs: validate-input
    if: needs.validate-input.outputs.should_proceed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: server
        run: npm ci

      - name: Build application
        working-directory: server
        run: npm run build

      - name: Set up environment variables
        run: |
          echo "Setting up environment for ${{ github.event.inputs.environment }}"
          case "${{ github.event.inputs.environment }}" in
            production)
              # Azure PostgreSQL requires SSL - force SSL mode
              DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}"
              echo "Original DATABASE_URL configured"
              
              # Remove any existing query parameters and add sslmode=require
              BASE_URL=$(echo "$DATABASE_URL" | cut -d'?' -f1)
              echo "DATABASE_URL=${BASE_URL}?sslmode=require" >> $GITHUB_ENV
              echo "✅ Applied SSL mode: require for Azure PostgreSQL"
              ;;
            staging)
              DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}"
              echo "Original DATABASE_URL configured"
              
              # Remove any existing query parameters and add sslmode=require  
              BASE_URL=$(echo "$DATABASE_URL" | cut -d'?' -f1)
              echo "DATABASE_URL=${BASE_URL}?sslmode=require" >> $GITHUB_ENV
              echo "✅ Applied SSL mode: require for staging environment"
              ;;
            development)
              echo "DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" >> $GITHUB_ENV
              echo "✅ Development DATABASE_URL configured"
              ;;
          esac

      - name: Verify SSL configuration
        run: |
          echo "🔍 Verifying DATABASE_URL SSL configuration..."
          if [[ "$DATABASE_URL" == *"sslmode=require"* ]]; then
            echo "✅ SSL mode: require is properly configured"
          else
            echo "⚠️ WARNING: sslmode=require not found in DATABASE_URL"
            echo "Current DATABASE_URL format: ${DATABASE_URL%%:*}://[credentials]@[host]/[database]?..."
          fi

      - name: Test database connection
        working-directory: server
        run: |
          echo "Testing database connection with SSL..."
          node -e "
            const { Pool } = require('pg');
            console.log('🔗 Connection URL format: ' + (process.env.DATABASE_URL.split('@')[1] || 'localhost'));
            console.log('🔒 SSL enforcement: ' + (process.env.DATABASE_URL.includes('sslmode=require') ? 'ENABLED' : 'DISABLED'));
            
            const pool = new Pool({ 
              connectionString: process.env.DATABASE_URL,
              ssl: process.env.DATABASE_URL.includes('sslmode=require') ? { rejectUnauthorized: false } : false
            });
            
            pool.query('SELECT NOW() as current_time')
              .then(result => {
                console.log('✅ Database connection successful:', result.rows[0].current_time);
                return pool.end();
              })
              .catch(err => {
                console.error('❌ Database connection failed:', err.message);
                if (err.message.includes('no encryption')) {
                  console.error('💡 SSL Fix: The connection requires SSL encryption');
                  console.error('💡 Make sure your DATABASE_URL includes ?sslmode=require');
                }
                process.exit(1);
              });
          "

      - name: Run database migrations
        working-directory: server
        run: |
          echo "🚀 Running database migrations for ${{ github.event.inputs.environment }}..."
          npm run db:migrate
          echo "✅ Database migrations completed successfully!"

      - name: Verify migration status
        working-directory: server
        run: |
          echo "🔍 Verifying migration status..."
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({ connectionString: process.env.DATABASE_URL });
            pool.query('SELECT * FROM migration_history ORDER BY executed_at DESC LIMIT 5')
              .then(result => {
                console.log('📋 Recent migrations:');
                result.rows.forEach(row => {
                  console.log(\`  ✅ \${row.migration_name} - \${row.executed_at}\`);
                });
                return pool.end();
              })
              .catch(err => {
                console.error('❌ Failed to verify migrations:', err.message);
                process.exit(1);
              });
          "

      - name: Migration Summary
        if: success()
        run: |
          echo "## 🎉 Migration Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Database migrations have been applied successfully to the ${{ github.event.inputs.environment }} environment." >> $GITHUB_STEP_SUMMARY

      - name: Migration Failed Summary
        if: failure()
        run: |
          echo "## ❌ Migration Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Database migration failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "Make sure the database is accessible and the migration scripts are valid." >> $GITHUB_STEP_SUMMARY