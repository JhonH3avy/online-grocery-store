# Database Seeding Workflow
# This workflow allows manual database seeding to be triggered from GitHub Actions

name: Database Seeding

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for seeding'
        required: true
        default: 'development'
        type: choice
        options:
        - production
        - staging
        - development
      confirm_seeding:
        description: 'Type "SEED" to confirm you want to seed the database'
        required: true
        type: string
      force_reseed:
        description: 'Force re-seeding (will clear existing data first)'
        required: false
        default: false
        type: boolean

jobs:
  validate-input:
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.validation.outputs.should_proceed }}
    steps:
      - name: Validate confirmation input
        id: validation
        run: |
          if [ "${{ github.event.inputs.confirm_seeding }}" = "SEED" ]; then
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "✅ Seeding confirmation validated"
          else
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "❌ Seeding not confirmed. Please type 'SEED' to proceed."
            exit 1
          fi

  seed:
    runs-on: ubuntu-latest
    needs: validate-input
    if: needs.validate-input.outputs.should_proceed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        working-directory: server
        run: npm ci

      - name: Build application
        working-directory: server
        run: npm run build

      - name: Set up environment variables
        run: |
          echo "Setting up environment for ${{ github.event.inputs.environment }}"
          case "${{ github.event.inputs.environment }}" in
            production)
              # Azure PostgreSQL requires SSL - force SSL mode
              DATABASE_URL="${{ secrets.PRODUCTION_DATABASE_URL }}"
              echo "Original DATABASE_URL configured"
              
              # Remove any existing query parameters and add sslmode=require
              BASE_URL=$(echo "$DATABASE_URL" | cut -d'?' -f1)
              echo "DATABASE_URL=${BASE_URL}?sslmode=require" >> $GITHUB_ENV
              echo "✅ Applied SSL mode: require for Azure PostgreSQL"
              ;;
            staging)
              DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}"
              echo "Original DATABASE_URL configured"
              
              # Remove any existing query parameters and add sslmode=require  
              BASE_URL=$(echo "$DATABASE_URL" | cut -d'?' -f1)
              echo "DATABASE_URL=${BASE_URL}?sslmode=require" >> $GITHUB_ENV
              echo "✅ Applied SSL mode: require for staging environment"
              ;;
            development)
              echo "DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" >> $GITHUB_ENV
              echo "✅ Development DATABASE_URL configured"
              ;;
          esac

      - name: Production Safety Check
        if: github.event.inputs.environment == 'production' && github.event.inputs.force_reseed == 'true'
        run: |
          echo "⚠️ WARNING: You are about to force re-seed the PRODUCTION database!"
          echo "This will DELETE ALL EXISTING DATA!"
          echo "Please make sure you have a backup before proceeding."
          echo "Sleeping for 10 seconds to allow cancellation..."
          sleep 10

      - name: Verify SSL configuration
        run: |
          echo "🔍 Verifying DATABASE_URL SSL configuration..."
          if [[ "$DATABASE_URL" == *"sslmode=require"* ]]; then
            echo "✅ SSL mode: require is properly configured"
          else
            echo "⚠️ WARNING: sslmode=require not found in DATABASE_URL"
            echo "Current DATABASE_URL format: ${DATABASE_URL%%:*}://[credentials]@[host]/[database]?..."
          fi

      - name: Test database connection
        working-directory: server
        run: |
          echo "Testing database connection with SSL..."
          node -e "
            const { Pool } = require('pg');
            console.log('🔗 Connection URL format: ' + (process.env.DATABASE_URL.split('@')[1] || 'localhost'));
            console.log('🔒 SSL enforcement: ' + (process.env.DATABASE_URL.includes('sslmode=require') ? 'ENABLED' : 'DISABLED'));
            
            const pool = new Pool({ 
              connectionString: process.env.DATABASE_URL,
              ssl: process.env.DATABASE_URL.includes('sslmode=require') ? { rejectUnauthorized: false } : false
            });
            
            pool.query('SELECT NOW() as current_time')
              .then(result => {
                console.log('✅ Database connection successful:', result.rows[0].current_time);
                return pool.end();
              })
              .catch(err => {
                console.error('❌ Database connection failed:', err.message);
                if (err.message.includes('no encryption')) {
                  console.error('💡 SSL Fix: The connection requires SSL encryption');
                  console.error('💡 Make sure your DATABASE_URL includes ?sslmode=require');
                }
                process.exit(1);
              });
          "

      - name: Check if database is empty
        working-directory: server
        run: |
          echo "🔍 Checking database state..."
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({ connectionString: process.env.DATABASE_URL });
            
            async function checkData() {
              try {
                const result = await pool.query('SELECT COUNT(*) as count FROM products');
                const productCount = result.rows[0].count;
                console.log(\`📊 Current products in database: \${productCount}\`);
                
                if (productCount > 0 && '${{ github.event.inputs.force_reseed }}' !== 'true') {
                  console.log('⚠️ Database already contains data and force_reseed is not enabled.');
                  console.log('Seeding will add to existing data or skip if data exists.');
                } else if (productCount > 0 && '${{ github.event.inputs.force_reseed }}' === 'true') {
                  console.log('🗑️ Force reseed enabled - existing data will be cleared.');
                } else {
                  console.log('✅ Database is empty - ready for seeding.');
                }
                
                await pool.end();
              } catch (err) {
                console.log('ℹ️ Could not check existing data (tables might not exist yet) - proceeding with seed.');
                await pool.end();
              }
            }
            
            checkData();
          "

      - name: Run database seeding
        working-directory: server
        run: |
          echo "🌱 Seeding database for ${{ github.event.inputs.environment }}..."
          if [ "${{ github.event.inputs.force_reseed }}" = "true" ]; then
            echo "🗑️ Force reseed enabled - clearing existing data first..."
            export FORCE_RESEED=true
          fi
          npm run db:seed
          echo "✅ Database seeding completed successfully!"

      - name: Verify seeded data
        working-directory: server
        run: |
          echo "🔍 Verifying seeded data..."
          node -e "
            const { Pool } = require('pg');
            const pool = new Pool({ connectionString: process.env.DATABASE_URL });
            
            async function verifyData() {
              try {
                const queries = [
                  { name: 'Categories', query: 'SELECT COUNT(*) as count FROM categories' },
                  { name: 'Subcategories', query: 'SELECT COUNT(*) as count FROM subcategories' },
                  { name: 'Products', query: 'SELECT COUNT(*) as count FROM products' },
                  { name: 'Users', query: 'SELECT COUNT(*) as count FROM users' }
                ];
                
                console.log('📊 Data verification results:');
                for (const q of queries) {
                  try {
                    const result = await pool.query(q.query);
                    console.log(\`  ✅ \${q.name}: \${result.rows[0].count} records\`);
                  } catch (err) {
                    console.log(\`  ⚠️ \${q.name}: Could not verify (table might not exist)\`);
                  }
                }
                
                await pool.end();
              } catch (err) {
                console.error('❌ Failed to verify data:', err.message);
                process.exit(1);
              }
            }
            
            verifyData();
          "

      - name: Seeding Summary
        if: success()
        run: |
          echo "## 🌱 Database Seeding Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force Reseed:** ${{ github.event.inputs.force_reseed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Database has been seeded successfully with initial data for the ${{ github.event.inputs.environment }} environment." >> $GITHUB_STEP_SUMMARY

      - name: Seeding Failed Summary
        if: failure()
        run: |
          echo "## ❌ Database Seeding Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force Reseed:** ${{ github.event.inputs.force_reseed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Database seeding failed. Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "Make sure the database is accessible and properly migrated before seeding." >> $GITHUB_STEP_SUMMARY